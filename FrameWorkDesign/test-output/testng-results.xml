<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="2" ignored="0" total="3" passed="1">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="81185" started-at="2021-02-06T00:03:21 CST" finished-at="2021-02-06T00:04:42 CST">
    <groups>
    </groups>
    <test name="Test" duration-ms="81185" started-at="2021-02-06T00:03:21 CST" finished-at="2021-02-06T00:04:42 CST">
      <class name="insuranceCalc_Motorcycle.EndToEndTests_Motorcycle">
        <test-method status="PASS" signature="setup()[pri:0, instance:insuranceCalc_Motorcycle.EndToEndTests_Motorcycle@242b836]" name="setup" is-config="true" duration-ms="11684" started-at="2021-02-06T00:03:22 CST" finished-at="2021-02-06T00:03:33 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="insuranceCalculate(java.lang.Object)[pri:0, instance:insuranceCalc_Motorcycle.EndToEndTests_Motorcycle@242b836]" name="insuranceCalculate" duration-ms="17763" started-at="2021-02-06T00:03:33 CST" data-provider="vehData" finished-at="2021-02-06T00:03:51 CST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Vehicle_List Price=888, Product_startdate=12/12/2024, PriceValidation_Gold=696.00, TC No=1, Vehicle_Annual Mileage=100, Product_insurancesum= 5.000.000,00, Vehicle_Date of Manufacture=09/04/2019, Insurant_Hobby=speeding,Other, SelectOption=Silver, PriceValidation_Ultimate=2,604.00, PriceValidation_Silver=236.00, Vehicle_Make=Honda, Insurant_occupation=Farmer, Vehicle_No of Seats_motorcycle=2, Insurant_LastName=NNN, Product_OptionalProducts=Euro Protection, Vehicle_Enging Performance=666, Insurant_ImageFilePath=??, Vehicle_Model=Motorcycle, Insurant_country=India, Insurant_zipcode=444061, Product_damageinsurance=Partial Coverage, TC Name=Verify Insurance Premium for Honda MotorCycle, Vehicle_CylinderCapacity=333, PriceValidation_Platinum=1,367.00, Insurant_FirstName=Prakash, Insurant_birthdate=12/12/1989, Insurant_gender=Male}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insuranceCalculate -->
        <test-method status="PASS" signature="close()[pri:0, instance:insuranceCalc_Motorcycle.EndToEndTests_Motorcycle@242b836]" name="close" is-config="true" duration-ms="0" started-at="2021-02-06T00:03:51 CST" finished-at="2021-02-06T00:03:51 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- close -->
        <test-method status="PASS" signature="setup()[pri:0, instance:insuranceCalc_Motorcycle.EndToEndTests_Motorcycle@242b836]" name="setup" is-config="true" duration-ms="6930" started-at="2021-02-06T00:03:51 CST" finished-at="2021-02-06T00:03:58 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="FAIL" signature="insuranceCalculate(java.lang.Object)[pri:0, instance:insuranceCalc_Motorcycle.EndToEndTests_Motorcycle@242b836]" name="insuranceCalculate" duration-ms="17395" started-at="2021-02-06T00:03:58 CST" data-provider="vehData" finished-at="2021-02-06T00:04:15 CST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Vehicle_List Price=888, Product_startdate=12/12/2025, PriceValidation_Gold=772.00, TC No=2, Vehicle_Annual Mileage=100, Product_insurancesum= 20.000.000,00, Vehicle_Date of Manufacture=09/04/2001, Insurant_Hobby=speeding,Other, SelectOption=Gold, PriceValidation_Ultimate=2,887.00, PriceValidation_Silver=702.00, Vehicle_Make=Volvo, Insurant_occupation=Farmer, Vehicle_No of Seats_motorcycle=2, Insurant_LastName=NNN, Product_OptionalProducts=Euro Protection, Vehicle_Enging Performance=900, Insurant_ImageFilePath=??, Vehicle_Model=Scooter, Insurant_country=Sweden, Insurant_zipcode=444061, Product_damageinsurance=Partial Coverage, TC Name=Verify Insurance Premium for Volvo Scooter, Vehicle_CylinderCapacity=900, PriceValidation_Platinum=1,515.00, Insurant_FirstName=Seema, Insurant_birthdate=12/12/1977, Insurant_gender=Female}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Pricings are not matching expected [702.00] but found [262.00]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Pricings are not matching expected [702.00] but found [262.00]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at insuranceCalc_Motorcycle.EndToEndTests_Motorcycle.insuranceCalculate(EndToEndTests_Motorcycle.java:37)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insuranceCalculate -->
        <test-method status="PASS" signature="close()[pri:0, instance:insuranceCalc_Motorcycle.EndToEndTests_Motorcycle@242b836]" name="close" is-config="true" duration-ms="1" started-at="2021-02-06T00:04:16 CST" finished-at="2021-02-06T00:04:16 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- close -->
        <test-method status="PASS" signature="setup()[pri:0, instance:insuranceCalc_Motorcycle.EndToEndTests_Motorcycle@242b836]" name="setup" is-config="true" duration-ms="7877" started-at="2021-02-06T00:04:16 CST" finished-at="2021-02-06T00:04:24 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="FAIL" signature="insuranceCalculate(java.lang.Object)[pri:0, instance:insuranceCalc_Motorcycle.EndToEndTests_Motorcycle@242b836]" name="insuranceCalculate" duration-ms="18275" started-at="2021-02-06T00:04:24 CST" data-provider="vehData" finished-at="2021-02-06T00:04:42 CST">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Vehicle_List Price=1000, Product_startdate=12/12/2025, PriceValidation_Gold=87.00, TC No=3, Vehicle_Annual Mileage=100, Product_insurancesum= 3.000.000,00, Vehicle_Date of Manufacture=09/04/1989, Insurant_Hobby=speeding,Other, SelectOption=Ultimate, PriceValidation_Ultimate=1,025.00, PriceValidation_Silver=93.00, Vehicle_Make=Ford, Insurant_occupation=Farmer, Vehicle_No of Seats_motorcycle=2, Insurant_LastName=NNN, Product_OptionalProducts=Euro Protection, Vehicle_Enging Performance=100, Insurant_ImageFilePath=??, Vehicle_Model=Moped, Insurant_country=Sweden, Insurant_zipcode=444061, Product_damageinsurance=Partial Coverage, TC Name=Verify Insurance Premium for Ford Moped, Vehicle_CylinderCapacity=100, PriceValidation_Platinum=538.00, Insurant_FirstName=Savali, Insurant_birthdate=12/12/1956, Insurant_gender=Female}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Pricings are not matching expected [87.00] but found [274.00]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Pricings are not matching expected [87.00] but found [274.00]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at insuranceCalc_Motorcycle.EndToEndTests_Motorcycle.insuranceCalculate(EndToEndTests_Motorcycle.java:36)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- insuranceCalculate -->
        <test-method status="PASS" signature="close()[pri:0, instance:insuranceCalc_Motorcycle.EndToEndTests_Motorcycle@242b836]" name="close" is-config="true" duration-ms="1" started-at="2021-02-06T00:04:42 CST" finished-at="2021-02-06T00:04:42 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- close -->
      </class> <!-- insuranceCalc_Motorcycle.EndToEndTests_Motorcycle -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
